#
# gunicorn -w 4 app:application -b 0.0.0.0:5656  --threads 5 --error-logfile - --access-logfile - --reload
#

from werkzeug.middleware.dispatcher import DispatcherMiddleware # use to combine each Flask app into a larger one that is dispatched based on prefix
from api_logic_server_run import flask_app as sra_app
from admin_api import create_app as create_admin_api_app, User, Api
from safrs import SAFRSAPI as SafrsApi, DB as db
from database import models
from flask import Flask
from flask_swagger_ui import get_swaggerui_blueprint

#
# 
#
def create_api(app, host="localhost", port=5000, app_prefix="", api_prefix="/api", models = []):
    """
        Add safrsapi endpoints to app for the specified models
        =>
        * create the swagger blueprint
        * create the api endpoints
    """
    
    
    api_spec_url = f"/swagger"
    swaggerui_blueprint = get_swaggerui_blueprint(
        api_prefix, f"{app_prefix}{api_prefix}{api_spec_url}.json", config={"docExpansion": "none", "defaultModelsExpandDepth": -1}
    )
    
    app.register_blueprint(swaggerui_blueprint, url_prefix=f"{api_prefix}")
    api = SafrsApi(app, 
                    host=host,
                    port=port,
                    prefix=api_prefix,
                    swaggerui_blueprint=swaggerui_blueprint,
                    api_spec_url=api_spec_url,
                    custom_swagger={"basePath" : f"{app_prefix}{api_prefix}"} )
    
    for model in models:
        api.expose_object(model)
    api.expose_als_schema(api_root=f"//{host}:{port}{app_prefix}{api_prefix}")
    print(f"Created API: http://{host}:{port}{app_prefix}{api_prefix}")
    return api


host = "localhost"
port = 5656

#
# Create the admin api (endpoints for /Users, /Apis)
#
admin_app = create_admin_api_app(host=host)

with admin_app.app_context():
    create_api(admin_app, host=host, port=port, app_prefix="/admin", api_prefix="/api", models = [User,Api])


#
# Create the api for the models generated by ApiLogicServer
#
def expose_models(api):
    api.expose_object(models.Category)
    api.expose_object(models.Customer)
    api.expose_object(models.CustomerDemographic)
    api.expose_object(models.Department)
    api.expose_object(models.Employee)
    api.expose_object(models.EmployeeAudit)
    api.expose_object(models.EmployeeTerritory)
    api.expose_object(models.Territory)
    api.expose_object(models.Location)
    api.expose_object(models.Order)
    api.expose_object(models.OrderDetail)
    api.expose_object(models.Product)
    api.expose_object(models.Region)
    api.expose_object(models.Shipper)
    api.expose_object(models.Supplier)


api_app001 = Flask("API 001")
db.init_app(api_app001)
api_app001.config.from_object("config.Config")
api_app001_app_prefix = "/app001"

with api_app001.app_context():
    db.create_all()
    api001 = create_api(api_app001, host=host, port=port, app_prefix=api_app001_app_prefix, api_prefix="/api", models = [])
    expose_models(api001)


#
# Second app
#
api_app002 = Flask("API 002")
db.init_app(api_app002)
api_app002.config.from_object("config.Config")
api_app002_app_prefix = "/app002"

with api_app002.app_context():
    api002 = create_api(api_app002, host=host, port=port, app_prefix=api_app002_app_prefix, api_prefix="/api", models = [])
    expose_models(api002)
 

#
# we need to add the swagger blueprint to the root app for the swagger UI to
#
create_api(sra_app, host=host, port=port, api_prefix="/api", models = [])

#
# wsgi application
#
application = DispatcherMiddleware(sra_app, {
    '/admin': admin_app,
    api_app001_app_prefix : api_app001,
    api_app002_app_prefix : api_app002
})
